name: 'Deploy'

on:
  push:
    branches: [ production ]


jobs:
  okr-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Extract Maven project version
        run: echo "version=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec | sed 's/-SNAPSHOT$//')" >> $GITHUB_OUTPUT
        id: store-version

      - name: Set up node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.17.1

      - name: Install Dependencies
        run: cd ./frontend && npm ci

      - name: Build frontend with Angular
        run: cd ./frontend && npm run build

      - name: Build backend with Maven
        run: mvn -B clean package --file pom.xml -P build-for-docker

      - name: Log in to Quay registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.QUAY_REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Build and push the Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ secrets.TAG }}:${{ steps.store-version.outputs.version}}-PROD

      - name: Trigger Deployment Workflow with latest Version
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.TARGET_REPOSITORY }}
          ref: ${{ vars.TARGET_REFERENCE }}
          path: ccy-repo
          token: ${{secrets.VERSION_TOKEN}}

      - name: Change Yaml
        shell: bash
        env:
          FILEPATH: ${{ vars.FILEPATH }}
          YAMLPATH: ${{ vars.YAML_PATH }}
          NEWVALUE: ${{ vars.NEW_VALUE_URL }}:${{ steps.store-version.outputs.version}}-PROD
          VERSION: v4.25.2
          BINARY: yq_linux_amd64
        run: |
          wget -q https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - |\
          tar xz && mv ${BINARY} /usr/local/bin/yq
          yq -i "${YAMLPATH} = \"${NEWVALUE}\"" ccy-repo/${FILEPATH}
      - name: Commit and Push Changes
        working-directory: ccy-repo
        shell: bash
        env:
          COMMITPREFIX: '[CTS]'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add ${{ vars.FILEPATH }} || {
            echo "No files were changed, so we did not commit anything"
            exit 1
          } && \
          git commit -m "$COMMITPREFIX Automated changes to ${{ vars.FILEPATH }}" && \
          git push origin ${{ vars.TARGET_REFERENCE }}
      - run: rm -rf ccy-repo
        shell: bash
  generate-and-push-sbom:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install cdxgen
        working-directory: frontend
        run: npm install -g @cyclonedx/cdxgen@8.6.0

      - name: 'Generate SBOM for maven dependencies'
        working-directory: backend
        run: mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom

      - name: 'Generate SBOM for npm dependencies'
        working-directory: frontend
        run: cdxgen -o ../sbom-npm.xml -t npm .

      - name: 'Merge frontend and backend SBOMs'
        run: |
          docker run --rm -v $(pwd):/data cyclonedx/cyclonedx-cli merge --input-files data/backend/target/bom.xml data/sbom-npm.xml --output-file data/sbom.xml

      - name: 'Push merged SBOM to dependency track'
        env:
          PROJECT_NAME: okr-production
        run: |
          curl --verbose -s --location --request POST ${{ secrets.DEPENDENCY_TRACK_URL }} \
          --header "X-Api-Key: ${{ secrets.SECRET_OWASP_DT_KEY }}" \
          --header "Content-Type: multipart/form-data" \
          --form "autoCreate=true" \
          --form "projectName=${PROJECT_NAME:-$GITHUB_REPOSITORY}" \
          --form "projectVersion=latest" \
          --form "bom=@sbom.xml"